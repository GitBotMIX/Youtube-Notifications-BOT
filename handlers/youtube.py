from youtubesearchpython.__future__ import ChannelsSearch, Video
import asyncio
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import Throttled
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from middlewares.i18m_language import get_user_locale
from create_bot import _
from keyboards.markups import get_youtube_add_method_kb
from functions import youtube_url
from data_base.sqlite_db import Youtube
from states.youtube_states import AddChannel


async def notifications_enabled(user_id, user_lang, channel_name):
    send_message_data = await bot.send_message(user_id, '‚òë')
    await asyncio.sleep(1.2)
    await bot.edit_message_text(
        _('üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ "{}" –≤–∫–ª—é—á–µ–Ω—ã‚òë', locale=user_lang).format(channel_name),
        chat_id=user_id, message_id=send_message_data.message_id)


async def notifications_enabled_error(user_id, user_lang, channel_name):
    send_message_data = await bot.send_message(user_id, '‚ùå')
    await asyncio.sleep(1.2)
    await bot.edit_message_text(
        _('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ "{}" —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã‚ùå', locale=user_lang).format(channel_name),
        chat_id=user_id, message_id=send_message_data.message_id)


async def add_youtube_channel(message: types.Message, user_lang):
    """
    videosSearch = VideosSearch('–î—Ä—ã–º—Å–∫–∏–π', limit=1)
    videosResult = await videosSearch.next()
    channel = ChannelsSearch('test', limit=3)
    channel = await channel.next()
    print(channel)
    """
    user_id = message.from_user.id
    await message.answer(_('–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞:', locale=user_lang),
                         reply_markup=await get_youtube_add_method_kb(user_id))


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('youtube_add_method '))
async def youtube_add_method_call_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_lang = await get_user_locale(user_id)
    add_method = call.data.replace('youtube_add_method ', '')
    if add_method == 'channel_name':
        await call.message.edit_text(_('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:', locale=user_lang))
        await AddChannel.channel_name.set()
    elif add_method == 'channel_url':
        await call.message.edit_text(_('–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:', locale=user_lang))
        await AddChannel.channel_url.set()
    elif add_method == 'channel_video_url':
        await call.message.edit_text(_('–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞:', locale=user_lang))
        await AddChannel.channel_video_url.set()
    else:
        await call.message.edit_text(_('–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:\n'
                                       ' ', locale=user_lang))


async def get_is_channel_correct_kb(channel_url: str, user_request_channel_name: str,
                                    channel_number: int, user_lang: str):
    channel_id = '/'.join(channel_url.split('/')[3:])
    user_request_channel_name = user_request_channel_name[:20]
    b1 = InlineKeyboardButton(text=_('–î–∞', locale=user_lang),  # YRC youtube_right_channel
                              callback_data=f"YRC {channel_id}")
    b2 = InlineKeyboardButton(text=_('–ù–µ—Ç', locale=user_lang),  # YWC youtube_wrong_channel
                              callback_data=f'YWC {user_request_channel_name}:{str(channel_number)}')
    b3 = InlineKeyboardButton(text=_('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', locale=user_lang),
                              url=channel_url)
    channel_correct_kb = InlineKeyboardMarkup(resize_keyboard=False)
    return channel_correct_kb.row(b1, b2).add(b3)


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('YRC '))
async def youtube_right_channel_call_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_lang = await get_user_locale(user_id)
    channel_short_url = call.data.replace('YRC ', '')
    channel_url = await youtube_url.get_channel_url_by_short_url(channel_short_url)
    channel_name = await youtube_url.get_channel_title(channel_url)
    current_video = await youtube_url.parse_videos(channel_url)
    user_channels_url_list = await Youtube.Channel.Url.where_user(user_id)
    if channel_url not in user_channels_url_list:
        await call.message.edit_text('‚òë')
        await asyncio.sleep(1.5)
        await call.message.edit_text(_('üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ "{}" –≤–∫–ª—é—á–µ–Ω—ã‚òë', locale=user_lang).format(channel_name))
        await Youtube.add(channel_name, channel_url, current_video, user_id)
    else:
        await call.message.edit_text('‚ùå')
        await asyncio.sleep(1.5)
        await call.message.edit_text(
            _('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ "{}" —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã‚ùå', locale=user_lang).format(channel_name))


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('YWC '))
async def youtube_wrong_channel_call_handler(call: types.CallbackQuery):
    data_list = call.data.replace('YWC ', '').split(':')
    user_id = call.from_user.id
    user_lang = await get_user_locale(user_id)
    search_name = data_list[0]
    channel_number = int(data_list[1])
    channel_number += 1
    message_id = call.message.message_id
    await YoutubeSearch.with_channel_name(call, search_name, user_id, user_lang, message_id,
                                          channel_number=int(channel_number), is_callback=True)


class YoutubeSearch:
    @staticmethod
    async def with_channel_name_call():
        pass

    @staticmethod
    async def with_channel_name_message():
        pass

    @staticmethod
    async def with_channel_name(message: types.Message | types.CallbackQuery,
                                search_name: str, user_id: int,
                                user_lang: str, message_id: int,
                                call_count: int = 0,
                                channel_number: int = 0,
                                bot_msg=None, is_callback=None):
        call_count += 1
        channel_number_limit = 10
        if channel_number == channel_number_limit:
            await bot.edit_message_text(chat_id=user_id, message_id=message_id,
                                        text=_('–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ '
                                               '—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ '
                                               '–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞', locale=user_lang),
                                        reply_markup=await get_youtube_add_method_kb(user_id))
            return
        if call_count >= 15:
            await bot.delete_message(user_id, bot_msg.message_id)
            await bot.send_message(user_id, _('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ "{}"\n '
                                              '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!', locale=user_lang).format(search_name),
                                   reply_markup=await get_youtube_add_method_kb(user_id))
            return
        channel_search = await ChannelsSearch(search_name, limit=channel_number_limit).next()
        try:
            video_count = channel_search['result'][channel_number]['videoCount']
            channel_subs = channel_search['result'][channel_number]['subscribers'][:-11]
        except IndexError:
            await bot.send_message(user_id,
                                   _('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å –∏–º–µ–Ω–µ–º "{}"', locale=user_lang).format(search_name))
            return
        except TypeError:
            await YoutubeSearch.with_channel_name(message, search_name, user_id, user_lang, message_id, call_count,
                                                  channel_number + 1, bot_msg, is_callback)
            return
        if not video_count or not channel_subs:
            await asyncio.sleep(0.2)
            call_count_animation = {1: 'üîç', 7: 'üîé'}
            if not is_callback:
                if call_count == 1:
                    bot_msg = await bot.send_message(user_id, _('...', locale=user_lang))
                try:
                    await bot.edit_message_text(chat_id=user_id, message_id=bot_msg.message_id,
                                                text=call_count_animation[call_count])
                except KeyError:
                    pass
                except AttributeError:
                    pass
            await YoutubeSearch.with_channel_name(message, search_name, user_id, user_lang, message_id, call_count,
                                                  channel_number, bot_msg, is_callback)
            return
        try:
            await bot.delete_message(user_id, bot_msg.message_id)
        except AttributeError:
            pass
        channel_url = channel_search['result'][channel_number]['link']
        channel_logo_url = f"{'https:'}{channel_search['result'][channel_number]['thumbnails'][1]['url']}"
        response_text = _('*–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —Ç—ã –∏—â–µ—à—å?*\n\n'
                          '–ù–∞–∑–≤–∞–Ω–∏–µ: *{channel_name}*\n'
                          '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: *{channel_subs}*\n'
                          '–í—Å–µ–≥–æ –≤–∏–¥–µ–æ: *{channel_video_count}*'
                          '{channel_logo_url}', locale=user_lang).format(
            channel_name=channel_search['result'][channel_number]['title'],
            channel_subs=channel_subs,
            channel_video_count=video_count,
            channel_logo_url=f"[.]({channel_logo_url})")
        if is_callback:
            await message.message.edit_text(response_text, parse_mode='Markdown',
                                            reply_markup=await get_is_channel_correct_kb(channel_url, search_name,
                                                                                         channel_number, user_lang))
        else:
            await bot.send_message(user_id, response_text, parse_mode='Markdown',
                                   reply_markup=await get_is_channel_correct_kb(channel_url, search_name,
                                                                                channel_number, user_lang))
            # await bot.send_photo(user_id, photo=channel_logo_url, caption=response_text, parse_mode='Markdown',
            #                     reply_markup=await get_is_channel_correct_kb(channel_url, search_name,
            #                                                                  channel_number, user_lang))


async def youtube_add_with_channel_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_lang = await get_user_locale(user_id)
    search_name = message.text
    channel_number = 0
    message_id = message.message_id
    await YoutubeSearch.with_channel_name(message, search_name, user_id, user_lang, message_id,
                                          channel_number=int(channel_number))

    await state.finish()


async def youtube_add_with_channel_url(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_lang = await get_user_locale(user_id)
    try:
        channel_url = await youtube_url.get_channel_url_id_by_url(message.text)
    except:
        send_message_data = await bot.send_message(user_id, '‚ùå')
        await asyncio.sleep(1.2)
        await bot.edit_message_text(_('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª‚ùå', locale=user_lang), chat_id=user_id,
                                    message_id=send_message_data.message_id)
        await state.finish()
        return
    channel_name = await youtube_url.get_channel_title(channel_url)
    current_video = await youtube_url.parse_videos(channel_url)
    user_channels_url_list = await Youtube.Channel.Url.where_user(user_id)
    if channel_url not in user_channels_url_list:
        await notifications_enabled(user_id, user_lang, channel_name)
        await Youtube.add(channel_name, channel_url, current_video, user_id)
    else:
        await notifications_enabled_error(user_id, user_lang, channel_name)
    await state.finish()


async def youtube_add_with_channel_video_url(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_lang = await get_user_locale(user_id)
    user_video_url = message.text
    try:
        video = await Video.getInfo(user_video_url)
    except:  # TypeError or ValueError
        send_message_data = await bot.send_message(user_id, '‚ùå')
        await asyncio.sleep(1.2)
        await bot.edit_message_text(_('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.‚ùå\n'
                                      '–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ '
                                      '- https://www.youtube.com/watch?v=ycPr5-27vSI', locale=user_lang),
                                    chat_id=user_id, message_id=send_message_data.message_id,
                                    disable_web_page_preview=True)
        await state.finish()
        return
    response_channel_name = video["channel"]['name']
    response_channel_url = video["channel"]['link']
    current_video = await youtube_url.parse_videos(response_channel_url)
    user_channels_url_list = await Youtube.Channel.Url.where_user(user_id)
    if response_channel_url not in user_channels_url_list:
        await notifications_enabled(user_id, user_lang, response_channel_name)
        await Youtube.add(response_channel_name, response_channel_url, current_video, user_id)
    else:
        await notifications_enabled_error(user_id, user_lang, response_channel_name)
    await state.finish()


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def delete_callback_execute(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_lang = await get_user_locale(user_id)
    channel_url = call.data.replace('del ', '')
    await Youtube.Channel.Url.delete(channel_url, user_id)
    await call.answer(text=_('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–µ –≤—ã–∫–ª—é—á–µ–Ω—ã', locale=user_lang))
    name_and_url_channel_list = await Youtube.Channel.get_all_rows_related_id(user_id)
    if name_and_url_channel_list:
        await call.message.edit_text(
            text=_('–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å?', locale=user_lang), reply_markup=await get_delete_youtube_channel_kb(name_and_url_channel_list))
    else:
        await call.message.edit_text(text='–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã')

async def get_delete_youtube_channel_kb(name_and_url_channel_list):
    markup = InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in name_and_url_channel_list:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        markup.add(InlineKeyboardButton(i[0][:20],
                                        callback_data=f'del {i[1]}'))
    return markup  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


async def delete_youtube_channel(message: types.Message):
    user_id = message.from_user.id
    user_lang = await get_user_locale(user_id)
    name_and_url_channel_list = await Youtube.Channel.get_all_rows_related_id(user_id)
    if name_and_url_channel_list:
        await message.answer(_('–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å?', locale=user_lang),
                             reply_markup=await get_delete_youtube_channel_kb(name_and_url_channel_list))
    else:
        await message.answer(_('–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–∏—Ç—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π "/–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"',
                               locale=user_lang))


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(add_youtube_channel, text_contains=['–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'])
    dp.register_message_handler(youtube_add_with_channel_name, state=AddChannel.channel_name)
    dp.register_message_handler(youtube_add_with_channel_url, state=AddChannel.channel_url)
    dp.register_message_handler(youtube_add_with_channel_video_url, state=AddChannel.channel_video_url)
    dp.register_message_handler(delete_youtube_channel, text_contains=['–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª'])
